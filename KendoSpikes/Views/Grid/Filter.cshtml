@using Train.Models
@using Newtonsoft.Json;

@{
    ViewBag.Title = "Grid";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model VehicleStatusViewModel
@section HeadContent{
    <style>
        #GridVehicles div.k-grid-content
        {
            max-height: 400px;
        }
    </style>
    <script type="text/x-kendo-tmpl" id="checkBoxListTempl">
        <div class='checkboxlist'>
            <div style="margin-bottom:3px; vertical-align:top;"><input type="checkbox" value="#:Id#" />&nbsp;#:Value#</div>
        </div>
    </script>
    <script type="text/x-kendo-tmpl" id="dummyTempl">
        <div class='checkboxlist'>
            <span>dummy</span>            
        </div>
    </script>
}
<h2>Demo Grid - Customized Filter</h2>
<h4>Highlighting an active customized filter column is not working</h4>
<br />
<div>
</div>
<div>
    @(
 Html.Kendo().Grid<Vehicle>()
        .Name("GridVehicles")
        .AutoBind(false)
        .DataSource(ds => ds
                              .Ajax()
                              .Read(read => read.Action("GetAllVehicles", "Grid"))
                              .PageSize(50)
        )
        .Events(e => {
             e.DataBound("onDataBound");
             e.DataBinding("onDataBinding");
             e.FilterMenuInit("onFilterMenuInit");
        })
        .Scrollable(s => s.Enabled(true).Height("auto"))
        .Pageable(p => p.Enabled(true).PreviousNext(true).Input(true).PageSizes(new[] { 50, 100, 200 }))
        .Sortable(s => s.Enabled(true))
        .Groupable(g => g.Enabled(true))
        .Filterable(f => f.Enabled(true).Extra(false))
            // .ColumnMenu()
        .Columns(c =>
        {
            c.Bound(o => o.Id).Filterable(false);
            c.Bound(o => o.Number).Filterable(false);
            c.Bound(o => o.Location);
            c.Bound(o => o.VehicleType);
            c.Bound(o => o.TimeAtLocation).Format("{0:dd/MM/yyyy HH:mm}");
            c.Bound(o => o.Position).Filterable(false);
            c.Bound(o => o.TrainNumber).Title("Train");
            c.Bound(o => o.LastEventDateTime).Format("{0:dd/MM/yyyy HH:mm}");
            c.Bound(o => o.DetachFlag);
        }).Reorderable(r => r.Columns(true))
    )
</div>

<script>

    $(document).ready(function () {
      $('#GridVehicles').data('kendoGrid').dataSource.read();
    });

    function onFilterMenuInit(e) {
       initCheckBoxFilter.call(this, e);
    }

    function initCheckBoxFilter(e) {
        var popup = e.container.data("kendoPopup");
        var dataSource = this.dataSource;
        var field = e.field;
        
        var items = uniqueForField(field);
        if (items === undefined) return; //Is not a customized filter

        var checkBoxDataSource = new kendo.data.DataSource({
            data: items
        });

        var helpTextElement = e.container.children(":first").children(":first");
        helpTextElement.nextUntil(":has(.k-button)").remove();

        var element = $("<div class='checkbox-ontainer'></div>").insertAfter(helpTextElement).kendoListView({
          dataSource: checkBoxDataSource,
          template: "<div><input type='checkbox' value='#:" + field + "#'/>#:" + field + "#</div>"
        });

        e.container.find("[type='submit']").click(function (e){
            e.preventDefault();
            e.stopPropagation();
            var filter = dataSource.filter() || {logic: "and", filters: []};
            var fieldFilters = $.map(element.find(":checkbox:checked"),function (input) {
                return {
                    field: field,
                    operator: "eq",
                    value: input.value
                };
            });
            if (fieldFilters.length) {
                removeFiltersForField(filter,field);
                filter.filters.push({
                    logic: "or",
                    filters: fieldFilters
                });
                dataSource.filter(filter);
            }
            popup.close();    
        });
    }

    function removeFiltersForField(filterObj, field) {
        if (filterObj.filters) {
          filterObj.filters = $.grep(filterObj.filters, function (filter) {
            removeFiltersForField(filter, field);
            if (filter.filters) {
              return filter.filters.length;
            } else {
              return filter.field != field;
            }
          });
        }
    }


    //Could be replaced by server side rendered lists for each filterable column
    function uniqueForField(field) {
        var locationFilters = [
                { Location: "Yard" },
                { Location: "Workshop" },
                { Location: "Network" },
                { Location: "Depart" }
        ];

        var vehicleTypeFilter = [
            { VehicleType: "Locomotive" },
            { VehicleType: "OreCar" },
            { VehicleType: "TestCar" },
        ];

        var fieldMap = {
            Location: locationFilters,
            VehicleType: vehicleTypeFilter
        };

        return fieldMap[field];
    
    }

    function locationFilter(element) {
        var grid = $("#GridVehicles").data('kendoGrid');
        MyMvcApp.customKendoFilters.filterByAjax(element, 'Location', '@Url.Action("_LoadLocations")', grid.dataSource);
    }

    @*function vehicleTypeFilter(element) {
        var types = '@Html.Raw(JsonConvert.SerializeObject(Model.VehicleTypes))';
        var grid = $("#GridVehicles").data('kendoGrid');
        MyMvcApp.customKendoFilters.filter(element, 'VehicleType', JSON.parse(types), grid.dataSource);
    }*@

    function vehicleTypeFilter(element) {
        var vehicleTypes = ['Car','Bike'];
        element.kendoAutoComplete({
            dataSource: {
                data: vehicleTypes   
            }
        });
    }

    function multiSelectFilter(element) {

        filterDiv.MultiSelectGridFilter({
            element: element,
            options: {


            }
        });
    }

    function createMultiSelect(element) {
        element.removeAttr("data-bind");
        element.removeAttr('data-bind');
        var filterMenu = $(element).closest('.k-filter-menu');
        filterMenu.html('<div class="filter-div" style="width: 140px;Height: 100px"></div>');
        var filterDiv = filterMenu.find('.filter-div');
        
        var types = ['Network','Depart','Workshop'];
          filterDiv.kendoMultiSelect({
            dataSource: types,
            change: function(e) {
              var filter = { logic: "or", filters: [] };
              var values = this.value();
              $.each(values, function(i, v) {
                filter.filters.push({field: "Location", operator: "eq", value: v });
              });
               var grid = $("#GridVehicles").data('kendoGrid');
               grid.dataSource.filter(filter);
            }
          });
        }

    function onDataBound(e) {
        log("Data bound event");
        var grid = $("#GridVehicles").data('kendoGrid');
        if (grid.dataSource.filter() != undefined) {

             log(grid.dataSource.filter().filters);
        }
       
        //var filterElement = $(".k-grid-filter").closest(".k-header[data-field='VehicleType']");
        //filterElement.children(".k-grid-filter").addClass('k-state-active');
    }

    function onDataBinding(e) {
        log("Data binding event");
        var grid = $("#GridVehicles").data('kendoGrid');
         if (grid.dataSource.filter() != undefined) {

             log(grid.dataSource.filter().filters);
        }
       
    }
</script>
