@using Train.Models
@{
    ViewBag.Title = "Grid";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model VehicleStatusViewModel
       
@section HeadContent{
    <style>
        #GridVehicles div.k-grid-content {
            max-height: 400px;
        }
    </style>
}

<h2>Demo Grid - Persist Grid Settings</h2>
<h5>Persists following settings in session and applies to grid upon revisits/refreshes</h5>
<ul>
    <li>Gropuping</li>
    <li>Sorting</li>
    <li>Filtering</li>
    <li>Paging</li>
    <li>Column Show/Hide</li>
    <li>Column Order</li>
    <li>TODO - Row Selection</li>
</ul>
<br/>
<div>
    @(
    Html.Kendo().Grid<Vehicle>()
        .Name("GridVehicles")
        .DataSource(ds => ds
                              .Ajax()
                              .Read(read => read.Action("GetAllVehicles", "Grid"))
                              .PageSize(50)
        )
        .Events(e =>
                    {
                        e.DataBound("gridDataBound");
                        e.ColumnHide("gridColumnHide");
                        e.ColumnShow("gridColumnShow");
                        e.ColumnReorder("gridColumnReorder");
                        e.DataBinding("gridDataBinding");
                    })
        .AutoBind(true)
        .Scrollable(s => s.Enabled(true).Height("auto"))
        .Pageable(p => p.Enabled(true).PreviousNext(true).Input(true).PageSizes(new [] {50,100,200}))
        .Sortable(s => s.Enabled(true))
        .Groupable(g => g.Enabled(true))
        .Filterable(f => f.Enabled(true))
        //.ColumnMenu()
        .Columns(c =>
                     {
                         c.Bound(o => o.Id);
                         c.Bound(o => o.Number);
                         c.Bound(o => o.Location).Filterable(f => f.UI("locationFilter"));
                         c.Bound(o => o.TimeAtLocation).Format("{0:dd/MM/yyyy HH:mm}");
                         c.Bound(o => o.Position);
                         c.Bound(o => o.TrainNumber).Title("Train");
                         c.Bound(o => o.VehicleType).Title("Type");
                         c.Bound(o => o.TripCount).Title("Trip Count");
                         c.Bound(o => o.LastEventDateTime).Format("{0:dd/MM/yyyy HH:mm}");
                         c.Bound(o => o.DetachFlag);
                     }).Reorderable(r => r.Columns(true))
          )
</div>

<script>

    var loadStateUrl = '@Url.Action("LoadState")';
    var saveStateUrl = '@Url.Action("SaveState")';
    var toPersist = false;

    $(document).ready(function () {
       
        log('On Document Load');
        if (toPersist) {
            var gridStateRequest = MyMvcApp.enhancedKendoGrid.loadState(loadStateUrl);

            gridStateRequest.done(function(gridState) {
                if (gridState === '') {
                    $("#GridVehicles").data("kendoGrid").dataSource.read();
                    return;
                }
                log('Grid state loaded from backend');
                var gridStateJson = JSON.parse(gridState);
                log(gridStateJson);
                reloadGridWithStatus('GridVehicles', gridStateJson);
            });
        } else {
            $('#GridVehicles').data('kendoGrid').dataSource.read();
        }
   
       
    });

    function reloadGridWithStatus(gridName, state) {

        var grid = $('#' + gridName).data('kendoGrid');
        
        var options = grid.options;
        options.columns = state.columns;

        options.dataSource.page = state.page;
        options.dataSource.pageSize = state.pageSize;
        options.dataSource.sort = state.sort;
        options.dataSource.filter = state.filter;
        options.dataSource.group = state.group;

        //grid.destroy();

        //$('#' + gridName)
        //    .empty()
        //    .kendoGrid(options);
        
        //Need to resolve the grid again since the previous 'grid' is destroyed
        $('#' + gridName).data('kendoGrid').dataSource.read();
    }

   
    function gridColumnHide(e) {
        log('Grid Event: ColumnHide');
        var grid = this;
        saveGridState(grid);
    }

    function gridColumnShow(e) {
        log('Grid Event: ColumnShow');
        var grid = this;
        saveGridState(grid);
    }

    function gridColumnReorder(e) {
        log('Grid Event: ColumnReorder');
        var grid = this;
        saveGridState(grid);
    }

    function gridDataBound(e) {
        log('Grid Event: DataBound');
        var grid = this;
        saveGridState(grid);
    }

    function gridDataBinding(e) {
        log('Grid Event: DataBinding');
        log(this.dataSource.filter());
    }

    function locationFilter(element) {
        var grid = $("#GridVehicles").data('kendoGrid');
        MyMvcApp.customKendoFilters.filterByAjax(element, 'Location', '@Url.Action("_LoadLocations")', grid.dataSource);
    }


    function saveGridState(grid) {
        if (toPersist) {
            setTimeout(function () {
                var saveState = MyMvcApp.enhancedKendoGrid.saveState(grid, saveStateUrl);
                saveState.done(function () {
                    log('Grid State Saved to Session');
                });
            });
        }
       
    }



</script>
